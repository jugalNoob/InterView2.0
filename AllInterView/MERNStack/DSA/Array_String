let arr = [10, 20, 30, 40, 50, 60, 70];

console.log(
  arr.filter(item => item < 40), // Filter out elements less than 40
  arr.map((element, index) => [element, index]) // Map each element with its index
);


u///Random array  ----------------------------------------------------------------------------
let two=14565
// console.log(Math.random(two).toFixed(5))

//random password Generation algorithm
console.log(`#${Math.random().toString(16).slice(2 , 8).padEnd(6 , 0)}`)


//Revers your strings
// let one = "jugal";
// console.log(one.split('').reverse().join(''));

console.log(one.toString().length) // count string number
console.log(one.trim().split(" ").slice(-1)[0].length) //  last word length
console.log(Math.random().toString(16).slice(0,8).padEnd(2,6)) // random number 
console.log(one.split(" ").reverse().join(" ")) // reverse string


||||||||||||||||||| Check Array  min and max and center
let data=[1 , 2 , 3 , 4]

let min=data[0]

for(let i=0; i<data.length; i++){
    if(data[i] < min){
        min=data[i]
    }
}
console.log(min)

let max=data[0]
for(let i=0; i<data.length; i++){
   if(data[i] > max){
       max=data[i]
   }
}
console.log(max)

let data = [1, 2, 3, 4];
let centerIndex = Math.floor(data.length / 2);
console.log(centerIndex)
let centerElements = [];
if (data.length % 2 === 1) {
    centerElements.push(data[centerIndex]);
} else {
    centerElements.push(data[centerIndex - 1], data[centerIndex]);
}
console.log(centerElements); // Output the center element(s)



:::::::::::::::::::Sum of array elemnt ||||||||||||||||||||||||||||| 

let one=[10 , 20 , 30 , -10]
let two=one.reduce((alm , elem)=>{
    return alm + elem
},2)
console.log(two)


2::function maxSubArray(nums) {
  let sum = 0;
  let max = nums[0];

  for (let i = 0; i < nums.length; i++) {
    sum += nums[i];
    if (sum > max) {
      max = sum;
    }
    if (sum < 0) {
      sum = 0;
    }
  }
  return max;
}
// Time Complexity - O(n)
// Space Complexity - O(1)
console.log(maxSubArray([5, 4, -1, 7, 8]));


::::::::::::::::::::::::
Search
///////////////////////////////~~~~~~~~~~~~~~~~~~~~~~~:::::::::::::
Linear search
// function All() {
//     const allone = document.getElementById("check").value;
//     let array=["jugal" , "karan" , "knaika" , "anku"]
//     let pos=allone
//     for(let i=0; i<array.length; i++){
//         if(array[i]==pos){
//             alert("yes")
//             console.log(pos)
//             break;
//         }else{
//             console.log("check name")
//             break;
//         }
//     }

// }

Object SearchiNG\:::::::::::::::::::::::::::::::::::::::
function All() {
    const allone = document.getElementById("check").value;
    let data = {
        'name1': "knaika",
        'name2': 'jugal',
        'name3': 'kanika',
        'name4': 'ridhima',
        'name5': 'anki',
        'age':'23',
        'gender': "male"

    };
    let found = false;
    for (let key in data) {
        if (data[key] === allone) {
            found = true;
            console.log(allone + " found");
            break;
        }
    }
    if (!found) {
        console.log("check name");
    }
}


let data = {
   'name1': "knaika",
   'name2': 'jugal',
   'name3': 'kanika',
   'name4': 'ridhima',
   'name5': 'anki',
   'age': '23',
   'gender': "male"
};

let search = 'age';
let post = undefined;

for (let one in data) {
   if (one === search) {
       post = data[one];
       break; // Once found, no need to continue the loop
   }
}

console.log(post);



Binary Search with Iterative approac
         let data = [5, 9, 13, 17,45,67,89,100];
      let find = 89;
      let start = 0;
      let end = data.length - 1;
      let position = undefined;
      while (start <= end) {
        let mid = Math.floor((start + end) / 2);
        // console.warn(data[mid]);
        if (data[mid] === find) {
          position = mid;
          break;
        } else if (data[mid] < find) {
          start = mid + 1;
        } else {
          end = mid - 1;
        }
      }
      console.warn(position)



:::::::::::::::::::::::::::::::
Merge///////
///////////////////////////
let data1=[1 , 2  , 2 , 3]
let data2=[7 , 8 , 9 , 10]
let data3=[]
for(let i=0; i<data1.length; i++){
    data3[i]=data1[i]
}
console.log(data3)
for(let i=0; i<data2.length; i++){
    data3[data1.length+i]=data2[i]
}
console.log(data3)

let data1=[1, 2 , 3]
let data2=[4 , 5 , 6]
let data3=[...data1 , ...data2]
console.log(data3)
let data4=data1.concat(data2)
console.log(data4)



:::::::::::::::::::::::::
///Full str count Lenght
let str="jugal"
let obj={}
 for(let i=0; i<str.length; i++){
    if(obj[str]){
    obj[str]++
    }else{
        obj[str]=1
    }
}
console.log(obj)


let data="name"
let count={}
count[data]="karan"
console.log(count)


:::::::::::::::::::::::::::::::
deleting
///////////////////////////
// // console.log(  checkAnnar("hello" , "olle"))
let data=[10 , 20 , 30 , 540]

let del=0;

for(let i=0; i<data.length; i++){

    data[i]=data[i+1]

}
data.length=data.length-1;
console.log(data)



:::::::::::::::::::::::
1::Array Insert 
:::::::::::::::::::::::
et data=[ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1,0,100 ]
console.log(data.length)
let add=69;

let post=0;

for(let i=data.length-1; i>=0; i--){

    if(i>=post){
        
        data[i+1]=data[i]
    }if(i==post){

        data[i]=add;
    }

}

console.log(data)


var myArray = ["Element 1", "Element 2", "Element 3"];
var elementsToInsert = ["New Element 1", "New Element 2"];
var insertionIndexes = [1, 3];
for (var i = 0; i < elementsToInsert.length; i++) {
  var index = insertionIndexes[i];
  myArray.splice(index, 0, elementsToInsert[i]);
}
console.log(myArray);

let data=[2 ,  3 , 4 , 5]
data.splice(0 , 0 , 1)
console.log(data)


::::::::::  Random array Showing 

let arr = ["jugal" , "skaran" , "anku" , "lion" , "tiger"];
let random=Math.floor(Math.random()*arr.length)
let array=arr[random]
console.log(array)




::::::::::::::::::
Anagram
::::::::::::::::::
function  checkAnnar(str1 , str2){
    let objectstr={};
if(str1.length !== str2.length){
    return false;
}
for(ch of str1){
    // console.log(ch)
    objectstr[ch]=(objectstr[ch] || 0) + 1;
}
// console.log(objectstr)
for(ch of str2){
    // console.log(objectstr[ch])
    if(!objectstr[ch]){
        return false  
    }
objectstr[ch]--
}
return true
// console.log(objectstr)
}
// console.log(  checkAnnar("hello" , "olle"))

console.log(  checkAnnar([1 , 2 , 3], [3 , 2 , 1,0]))

1:::
function checkAnagram(input1, input2) {
    const sortedInput1 = [...input1].sort().join('');
    const sortedInput2 = [...input2].sort().join('');

    return sortedInput1 === sortedInput2;
}

console.log(checkAnagram("hello", "olle"));        // true
console.log(checkAnagram([1, 2, 3], [3, 2, 1]));  // true
console.log(checkAnagram("hello", "world"));      // false
console.log(checkAnagram([1, 2, 3], [3, 2, 2]));  // false


///////////////////////////
Fisher-Yates Shuffer Algo
/////////////////////////////

function fisherYatesShuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }
  const myArray = [1, 2, 3, 4, 5];
  const shuffledArray = fisherYatesShuffle(myArray);
  console.log(shuffledArray); // Output: [5, 2, 4, 1, 3] (random order)


////////////////////////////
Palindrome string 
///////////////////////////
function pali(data){
let start=0;
let end=data.length -1;
let result=true;
while(end>start){
    if(data[start] !=data[end]){
        result=false;
    }
    start++;
    end--;
}
return result;
}
let str="hello"
console.log(pali(str))


const reversedStr = str.split('').reverse().join('');
console.log("Reversed:", reversedStr);
const isPalindrome = str === reversedStr;
console.log(isPalindrome ? "Palindrome" : "Not a palindrome");


let data="level"
console.log(data , "not reverse")
let pal=data.split("").reverse().join("")  
console.log(data  == pal ? 'reverse' : 'reverse not')
//console.log(data.split("").reverse().join("").split("").sort().join("")  , "reverse and sort")


///////////Resvers array //////////////////////!SECTION
      let data = [10, 20, 30, 40, 50];
let start = 0;
let end = data.length - 1;

while (start < end) {
  let temp = data[start];
  data[start] = data[end];
  data[end] = temp;
  start++;
  end--;
}

console.log(data);



1:::let data=[10 , 20 , 30 , 40 , 50 , 60]
let temp;
function coumters(data,start , end){
    if(start <=end){
        temp=data[start]
        data[start]=data[end]
        data[end]=temp;
    
        coumters(data , start+1  , end -1)
    }
    console.log(data)
}
coumters(data, 0 , data.length -1)

// let start = 10;
// let end = 20;
// [start, end] = [end, start];
// console.log(start, end); // Output: 20 10

// let one=10
// let two=20
// let temp=one // temp =10
// one=two   // one = 20
// two=temp // two= 10
// console.log("One:", one, "Two:", two)




2:::: Array Swap :::::::::::::
// let arra1 = [10, 20];
// let arra2 = [30, 40];
  // Swap the arrays using a loop
    for (let i = 0; i < array1.length; i++) {
      let temp = array1[i];
      array1[i] = array2[i];
      array2[i] = temp;
    }
    
    // Print the swapped arrays
    console.log("Swapped Array 1: " + array1);
    console.log("Swapped Array 2: " + array2);
  }


// let data = 1;
// let data1 = 2;
// [data, data1] = [data1, data];
// console.log(data, data1); // Output: 2 1

let data=10
let data1=20
let temp=data
data=data1
data1=temp

console.log(data , data1)



1:::Sum of natural number:::::::::::::::::::::::::::::
function sumofnatural(num){
    // let sum=0;
    // for(let i=0; i<=num; i++){
    //     sum=sum+i
    // }
    // return sum
console.log(sumofnatural(5)) will output 15 (sum of natural numbers up to 5: 1 + 2 + 3 + 4 + 5 = 15).
    return  num*(num+1)/2
}
console.log(sumofnatural(5))
console.log(sumofnatural(10))
console.log(sumofnatural(8))



::::::::::::::sum of digits of a number ||||||||  //////////////////////////////////////////////////////////////////
function sumofDigits(num){
let sum=0;
while(num > 0){
    sum+=num%10;
    num= Math.floor(num/10);
}
return sum
}
console.log(sumofDigits(1287))



:::::::::count the number of digits of a number  //////////////////////////////////////////////////////////////////
function ones(sum){
   let count= sum.toString().length;
   let num=3
   if(count == num){
    console.log(true)
   console.log(count)
   }else{
    console.log(false)
   }
}
ones(123)

function Ones(sum){
   let count = sum.toString().length;
   console.log(count)
   return count;
}

let sum = "jugal sharma";
console.log(Ones(sum));



::::::::::FindMissingNumber:::::::::::

function findMissingNumber(num) {
    let sum = 0;
    for (let i = 0; i < num.length; i++) {
        sum += num[i];
    }
    return num.length * (num.length + 1) / 2 - sum;
}
console.log(findMissingNumber([0,1,2,4])); // Output will be 3 (as 3 is the missing number in the array)



:::::: Longest Common Prefix::::::::::::::::::::::::::::
function longestCommonPrefix(word1, word2) {
    let prefix = "";
    const minLength = Math.min(word1.length, word2.length);

    for (let i = 0; i < minLength; i++) {
        if (word1[i] === word2[i]) {
            prefix += word1[i]; // Add character to prefix if they match
        } else {
            break; // Break the loop if characters don't match
        }
    }
    return prefix;
}
// Example usage:
console.log(longestCommonPrefix('hello', 'world')); // Output will be an empty string as there's no common prefix
console.log(longestCommonPrefix('cat', 'cattle')); // Output will be "cat" as "cat" is the common prefix



:::::::::::::::::::

|||||||||first ocd=curance in  string ::::::::::
function firstOccurrence(str, subStr) {
    return str.indexOf(subStr);
}
// Example usage:
console.log(firstOccurrence("Hello, this is a sample text", "is")); // Output will be 10
console.log(firstOccurrence("JavaScript is fun", "Java")); // Output will be -1 (as "Java" is not present in "JavaScript is fun")




::::::::::::::::
|||||||||| Remove duplicates array||||||||
function removeDuplicatesNew(nums) {
   // Handle the edge case where the array is empty
   if (nums.length === 0) return 0;
 
   // Initialize the pointer for the last unique element
   let i = 0;
 
   // Loop through the array starting from the second element
   for (let j = 1; j < nums.length; j++) {
     // If a new unique element is found, update the array
     if (nums[i] !== nums[j]) {
       i++;
       nums[i] = nums[j];
     }
   }
 
   // The length of the array with unique elements is i + 1
   const length = i + 1;
 
   console.log(length)

   // Return the length and the modified array up to the new length
   return {
     length,
     uniqueArray: nums.slice(0, length), // Only return the unique part of the array
     fullArray: nums // Return the full modified array
   };
 }
 
 // Test the function with an example array
 const result = removeDuplicatesNew([0, 0, 1, 1, 1, 2, 2, 3, 3, 4 , 5 , 5]);
 console.log(`Length of unique elements: ${result.length}`);
 console.log(`Array with unique elements: ${result.uniqueArray}`);
 console.log(`Full array after removing duplicates: ${result.fullArray}`);
 


function removeDuplicatesNew(nums) {
  if (nums.length === 0) return 0;
  let i = 0;

  for (let j = 1; j < nums.length; j++) {
    if (nums[i] !== nums[j]) {
      i++;
      nums[i] = nums[j];
    }
  }

  return i + 1;
}
// Time Complexity - O(n)
// Space Complexity - O(1)
console.log(removeDuplicatesNew([0, 0, 1, 1, 1, 2, 2, 3, 3, 4]));




:::::::::::::||||||||| Cartesian product ::::::::::::
function cartesianProduct(arr1, arr2) {
  const result = []
  for (let i = 0; i < arr1.length; i++) {
    for (let j = 0; j < arr2.length; j++) {
      result.push([arr1[i], arr2[j]])
    }
  }
  return result
}
const arr1 = [1, 2]
const arr2 = [3, 4, 5]
console.log(cartesianProduct(arr1, arr2)) // [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]]




10::Iterating Over Matrices:  |||||||||||||||||||
// Create a sample 2D matrix
const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
// Iterate through rows and columns using nested loops
for (let row = 0; row < matrix.length; row++) {
  for (let col = 0; col < matrix[row].length; col++) {
    const element = matrix[row][col];
    console.log(`Element at row ${row}, col ${col}: ${element}`);
  }
}


// Create an array
// Use Destructuring in for...of Loops:
const pairs = [[1, 'one'], [2, 'two'], [3, 'three']];
for (const [number, name] of pairs) {
  console.log(`${name} is ${number}`);
}


::::::::::::::::
5::Two Pointers with a Single Loop:
function twoSum(nums, target) {
  let left = 0;
  let right = nums.length - 1;

  while (left < right) {
    const sum = nums[left] + nums[right];

    if (sum === target) {
      return [left, right]; // Indices of the pair
    } else if (sum < target) {
      left++;
    } else {
      right--;
    }
  }

  return null; // If no pair is found
}
const nums = [2, 7, 11, 15];
const target = 9;
console.log(twoSum(nums, target)); // Output: [0, 1]

