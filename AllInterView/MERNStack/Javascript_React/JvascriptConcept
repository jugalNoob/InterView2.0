Top-Level Await
// module.js
const data = await fetchData();
export default data;


4. RegExp Match Indices
const regex = /(foo)/d;
const match = regex.exec('foo bar');
console.log(match.indices); // [[0, 3], [0, 3]]


. Array Find from Last
findLast and findLastIndex Methods: Search arrays from the end.

const array = [1, 2, 3, 4, 5];
const lastEven = array.findLast(x => x % 2 === 0);
const lastEvenIndex = array.findLastIndex(x => x % 2 === 0);
console.log(lastEven); // 4
console.log(lastEvenIndex); // 3


. Array Grouping
const array = [1, 2, 3, 4, 5];
const grouped = array.group(x => x % 2 === 0 ? 'even' : 'odd');
console.log(grouped); // { odd: [1, 3, 5], even: [2, 4] }

const groupedMap = array.groupToMap(x => x % 2 === 0 ? 'even' : 'odd');
console.log(groupedMap); // Map { 'odd' => [1, 3, 5], 'even' => [2, 4] }


3. Hashbang Support
#!/usr/bin/env node
console.log('Hello, world!');


4. Change Array by Copy
copyWithin, fill, toSorted, toSpliced, with Methods: Non-destructive methods for modifying arrays.

const array = [1, 2, 3, 4, 5];
const newArray = array.toSorted((a, b) => b - a);
console.log(newArray); // [5, 4, 3, 2, 1]

const splicedArray = array.toSpliced(1, 2, 6, 7);
console.log(splicedArray); // [1, 6, 7, 4, 5]

const replacedArray = array.with(1, 10);
console.log(replacedArray); // [1, 10, 3, 4, 5]

1. Temporal API
Date and Time Handling: A modern API for working with dates and times.

const now = Temporal.Now.plainDateTimeISO();
console.log(now.toString()); // 2023-06-20T10:30:00

. Pattern Matching
...Match Expressions: A powerful way to destructure and conditionally process data.
const value = { type: 'circle', radius: 10 };
match (value) {
  { type: 'circle', radius } => console.log(`Circle with radius ${radius}`),
  { type: 'square', side } => console.log(`Square with side ${side}`),
  _ => console.log('Unknown shape')
}



:::::: Important Password Validation Regex -------------------

let are = "jugal1452";
let pattern = /^(?=.*[a-z])[a-z\d]+$/;

let str="jugal123"
console.log(str.match(pattern))
console.log(are.match(pattern));

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

::check javscript  memory
const v8 = require('v8');
const memoryUsage = v8.getHeapStatistics();
console.log(memoryUsage);


:::::: ---------------<><><><><<
Event Loop in javascript  
????????????  https://www.jsv9000.app/

function A(){
   console.log('A')
}
function B(){
   console.log('B')
}
function C(){
   console.log('C')
}
function D(){
   console.log('D')
}
A()
B()
Promise.resolve().then(C)
D()






::::: Function Call  bind apply -------<><><><>
function greet(name) {
   return `Hello, ${name}! I am ${this.role}.`;
}
const person = {
   role: 'a developer'
};
console.log(greet.call(person, 'jugal sharma'));
// Output: Hello, John! I am a developer.

....Apply
function greet(name) {
   return `Hello, ${name}! I am ${this.role}.`;
}
const person = {
   role: 'a developer'
};
console.log(greet.apply(person, ['John']));
// Output: Hello, John! I am a developer.

.................bind
function greet(name) {
   return `Hello, ${name}! I am ${this.role}.`;
}
const person = {
   role: 'a developer'
};
const greetPerson = greet.bind(person);
console.log(greetPerson('karan'));

::::::::: Array Flat 
// let data = [[1, 2, 3], [4, 5, 6]];
// let foo = data.flat(); // Flatten by one level
// console.log(foo); // Output: [1, 2, 3, 4, 5, 6]
let data = [[1, [2, 3]], [4, [5, 6]]];
let foo = data.flat(2); // Flatten by two levels
console.log(foo); // Output: [1, 2, 3, 4, 5, 6]




|||
console.log(18==18 ? "true" : "false")


|| Wait function::::::::::::::::::

async function one(){

let one = "one"
console.log(one)

let two=await "two"
console.log(two)

let four = "three"
console.log(four)

let five ="five"
console.log(five)
}

one()
console.log("jugal")

::::---------------------<><><
let data = [];

let one = Array.isArray(data);

console.log(one); // Output: true


:::::::::::::::::::::::::::::::::::::::::
let one=[7 , 3 , 5 , 6 , 8 , 10 , 2]

console.log(one.toSorted())
console.log(one.toReversed())
console.log(one.with(3 , "jugal")) // 3 is index  "add "


::Objects
let obj = [
   { name: "jugal", age: 20 },
   { name: "kanika", age: "2300" }
];

// Grouping by the 'name' property
let groupedObj = Object.groupBy(obj, person => person.name);
console.log(groupedObj);





::::::::::::::::::::::::|||||||||||||
Shift Assignment Operators

let x = 50;
let y = 2;
x <<= y; // Equivalent to: x = x << y;  2*10 =20 and 2 *20 =40
console.log(x); // Output: 20


let x = 20;
let y = 2;
x >>= y; // Equivalent to: x = x >> y;
console.log(x); // Output: 5


let x = -20;
let y = 2;
x >>>= y; // Equivalent to: x = x >>> y;
console.log(x); // Output: 1073741829






