https://www.javascripttutorial.net/javascript-variable-scopes/  -->Important 

https://www.javascripttutorial.net/  --> Important 

https://www.javascripttutorial.net/javascript-return-multiple-values/  --> Important 
https://www.javascripttutorial.net/javascript-nullish-coalescing-operator/

https://www.javascripttutorial.net/javascript-stack/

||||||||||||||||||||||||||||||||||||||||||||||||https://devdocs.io/javascript/ ----------------->><><><><>

:::::::: Fetch Data All Code -------------------
...Fetch 

fetch('/data.json')
  .then(response => response.json())
  .then(data => {
    console.log(data)
  })
  .catch(err => ...)


....Request options

fetch('/data.json', {
  method: 'post',
  body: new FormData(form), // post body
  body: JSON.stringify(...),
  headers: {
    'Accept': 'application/json'
  },
  credentials: 'same-origin', // send cookies
  credentials: 'include',     // send cookies, even in CORS

})

.......Respones ---------
fetch('/data.json')
.then(res => {
  res.text()       // response body (=> Promise)
  res.json()       // parse via JSON (=> Promise)
  res.status       //=> 200
  res.statusText   //=> 'OK'
  res.redirected   //=> false
  res.ok           //=> true
  res.url          //=> 'http://site.com/data.json'
  res.type         //=> 'basic'
                   //   ('cors' 'default' 'error'
                   //    'opaque' 'opaqueredirect')

  res.headers.get('Content-Type')
})


........Catching errors

fetch('/data.json')
  .then(checkStatus)
function checkStatus (res) {
  if (res.status >= 200 && res.status < 300) {
    return res
  } else {
    let err = new Error(res.statusText)
    err.response = res
    throw err
  }
}

::::::DataTypes in javascript
typeof "John"                 // Returns "string"
typeof 3.14                   // Returns "number"
typeof NaN                    // Returns "number"
typeof false                  // Returns "boolean"
typeof [1,2,3,4]              // Returns "object"
typeof {name:'John', age:34}  // Returns "object"
typeof new Date()             // Returns "object"
typeof funeturns "undefined" *
typeof null                   // Returns "object


let data = 41234534454n;
  console.log(typeof(data)); // Outputs the BigInt number
  
  let datas=BigInt(2533544554)
  console.log(typeof(datas))

  
let is=45

  console.log(isNaN(45))
  
  console.log(isFinite(45)); // Outputs false
  
  


Types of JavaScript Operators 
Arithmetic Operators
+	Addition
-	Subtraction
ction () {}         // Returns "function"
typeof myCar                  // R*	Multiplication
**	Exponentiation (ES2016)
/	Division
%	Modulus (Remainder)
++	Increment
--	Decrement
+=	Add and assign

let x = 5;
// x++; // Increment x by 1
// x+=1

console.log(x); // Output: 6


|||||||||||||||||||||||
Assignment Operators
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
**=	x **= y	x = x ** y
|||||||||||||||||||||||||||||
Comparison Operators
==	equal to	x == 8	false
x == 8	false	
x == 5	true	
x == "5"	true
x === 5	true	
x === "5"	false
!=	not equal	x != 8	true
>	greater than	x > 8	false	
<	less than	x < 8	true	
>=	greater than or equal to	x >= 8	false	
<=	less than or equal to	x <= 8	true


String Operators
You can compare strings using comparison operators like ==, ===, !=, !==, <, >, <=, and >=.
var str1 = "apple";
var str2 = "banana";
var result = str1 < str2; // result will be true because "apple" comes before "banana" in lexicographical order.


Logical Operators
&&=	x &&= y	x = x && (x = y)
||=	x ||= y	x = x || (x = y)
??=	x ??= y	x = x ?? (x = y)
&&	and	(x < 10 && y > 1) is true	
||	or	(x == 5 || y == 5) is false	
!	not	!(x == y) is true


let age = 18;
  let age1 = 18;
  
  if (age > 19 && age1 > 19) {
      console.log(true);
  } else {
      console.log(false);
  }

let age1 = 18;
  let age2 = 20;
  
  const op = [30, 25]; // Create an array with values
  
  [age1, age2] = op; // Destructuring assignment to update age1 and age2
  
  if (age1 > 25 || age2 > 25) {
    console.log(true); // If either age1 or age2 is greater than 25, print true
  } else {
    console.log(false); // If both age1 and age2 are 25 or less, print false
  }



||||||||||||||||||||||
Bitwise Operators
&=	x &= y	x = x & y
^=	x ^= y	x = x ^ y
|=	x |= y	x = x | y

|||||||||||||||
Ternary Operators
let voteable = (age < 18) ? "Too young":"Old enough";
    age = Number(age);
    if (isNaN(age)) {
      voteable = "Input is not a number";
    } else {
      voteable = (age < 18) ? "Too young" : "Old enough";
    }

|||||||||||||
Shift Assignment Operators
<<=	x <<= y	x = x << y
>>=	x >>= y	x = x >> y
>>>=	x >>>= y	x = x >>> y

||||||||||||||||||
The Nullish Coalescing Operator (??)
let name = null;
    let text = "missing";
    let result = name ?? text;


Type Operators



:::::::All Function In Jvaascript

function getNames() {  /// Returning multiple values from a function using an array
    // get names from the database or API
    let firstName = 'John',
        lastName = 'Doe';

    // return as an array
    return [firstName, lastName];
}

let names = getNames();
const [firstName, lastName] = getNames();


function getNames() {//Returning multiple values from an function using an object
  // get names from the database or API
  let firstName = 'John',
      lastName = 'Doe';

  // return values
  return {
    'firstName': firstName,
    'lastName': lastName
  };

// return { firstName, lastName };
}
let { firstName, lastName } = getNames()

00::function CallBack
function one(a, b) {
    console.log(a + b);
}

function two(a, b) {
    console.log(a * b);
}

function call(calls, a, b) {
    calls(a, b);
}

call(one, 2, 3); // Outputs: 5

call(two, 3, 3); // Outputs: 5


:::Const Function 
const one = () => () => () => console.log(5, 6, 7);
one()()();

const one=()=>{
   console.log("jugal")
}

one()


1::JavaScript Async

1::Function highOrder 

2::Function curing 
function one(a) {
   return function(b) {

       return function(c) {
           return function(d) {
               console.log(a, b, c, d);
           }
       }
   }
}

one(5)(4)(6)(7); // This would result in an error because the functions expect arguments


3::Function iiff
(function(){
   console.log("jugal")
})()


5::Function express
let one=function(){
   console.log("jugal")
}
one()

7::function call
8::function bind
9::function apply
The apply() Method with Arguments
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.apply(person1, ["Oslo", "Norway"]);
|||||||||
6::Function closure
function outerFunction() {
   let outerVariable = 'I am from the outer function';
   function innerFunction() {
       console.log(outerVariable); // innerFunction has access to outerVariable
   }
   return innerFunction;
}
const closureExample = outerFunction();
closureExample(); // This will log: "I am from the outer function"


7::Function prototype
8::Function thisKeyword
9::Function bindCallApply
::Function generator
::Arrow Function
Arrow Functions Return Value by Default: ::hello = () => "Hello World!";

10::data Time
let date = new Date();
  console.log(date);



||||||||||Function Generator

async function* createAsyncGenerator() {
  yield await Promise.resolve(1);
  yield await Promise.resolve(2);
  yield await Promise.resolve(3);
}

const foo = new GeneratorFunction(`
  yield 'a';
  yield 'b';
  yield 'c';
`);

let str = '';
for (const val of foo()) {
  str = str + val;
}

::::: Function Nmae 
const object = {
  func2: function () {},
};
console.log(func1.name);
// Expected output: "func1"
console.log(object.func2.name);


// Expression; the function is anonymous but assigned to a variable
const multiply = function (x, y) {
  return x * y;
};

// Expression; the function has its own name
const multiply = function funcName(x, y) {
  return x * y;
};

// Traditional anonymous function
(function (a) {
  return a + 100;
});


::: function Length
function func1() {}
function func2(a, b) {}
console.log(func1.length);
// Expected output: 0
console.log(func2.length);
// Expected output: 2


12::for Loop

13:: while Loop

14::do-while loop

15::for In

16::for of

17::Array
Array length
Array toString()
let one=[10 , 20 , 320 , 40 , 50]
  console.log(one.toString())

  ||||||||||||||| |||||||||||||||||||||||||||||||||||||  Array ---------------------<><><><><><><><><>

let data = ['jugal', 'karan', 'anku', 'home'];
// const iterator = =Object.keys();
// const iterator = data.values();
// console.log(iterator)

const iterator1 = data.entries();
console.log(iterator1.next().value);
for (let entry of iterator1) {
    console.log(entry);
}

console.log(data.at(-2))
console.log(Array.from('foo'));

//which elemnt not in array
const isBelowThreshold = (currentValue) => currentValue < 13;
const array1 = [1, 30, 39, 29, 10, 13];
console.log(array1.every(isBelowThreshold));

/// 
function isBiggerThan10(element, index, array) {
   return element > 10;
 }

 [2, 5, 8, 1, 4].some(isBiggerThan10); // false
 [12, 5, 8, 1, 4].some(isBiggerThan10); // true

 const arr = [1, 2, 3, 4, 5];
console.log(arr.with(2, 6)); // [1, 2, 6, 4, 5]
console.log(arr); // [1, 2, 3, 4, 5]

Array pop()
Array push()
Array shift()
Array unshift()
Array join()
toReversed()
toSorted()





3) Using the toSpliced() to replace elements in an array
const scores = [0,0,3,4,5];
const newScores = scores.toSpliced(0, 2, 1, 2);

console.log(scores);
console.log(newScores);

toSpliced(start, deleteCount)
toSpliced(start, deleteCount, item1)


: Array.findLastIndex()
const found = array1.findLast((element) => element > 45);

||||Array.entries()
const array1 = ['a', 'b', 'c'];
const iterator1 = array1.entries()
console.log(iterator1.next().value); // Output: [0, 'a']
console.log(iterator1.next().value); // Output: [1, 'b']
console.log(iterator1.next().value); // Output: [2, 'c']
console.log(iterator1.next().value); // Output: undefined (done is true)



|||Array Convert to To String
const array1 = [1, 2, 'a', '1a'];
console.log(array1.toString());


|||||||||Every Import 
let age = [10, 20, 30, 10];

  const one= age.every((key)=>{
   return key >35
 })
 console.log(one , "yes")


 |||||Some ||||||||||||||||


Array delete()

Array concat()
let ne=["jugal" , "karan" , "jio" , "artial"]
  let two=[10 , 20 , 30 , 40]
  ne.push(...two)
  console.log(ne)
  
Array flat()
const array = [1, 2, [3, 4], 5];
const flattenedArray = array.flat();
console.log(flattenedArray); //
Array splice()
Array slice()

const pets = ['cat', 'dog', 'bat'];
console.log(pets.includes('cat'));
console.log(pets.includes('at'));



const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

1:::: Arrray Join 

const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join());
// Expected output: "Fire,Air,Water"

console.log(elements.join(''));
// Expected output: "FireAirWater"

console.log(elements.join('-'));
// Expected output: "Fire-Air-Water"



Section 2. Adding/removing elements
push() – add one or more elements to the end of an array.
unshift() – add one or more elements to the beginning of an array.
pop() – remove an element from the end of an array.
shift() – remove the first element from an array.
splice() – manipulate elements in an array such as deleting, inserting, and replacing elements.
slice() – copy elements of an array.


Section 3. Finding elements
indexOf() – locate an element in an array.
includes() – check if an element is in an array.
find() – find an element in an array
findIndex() – find the index of an element in an array.


Section 6. Creating Arrays
of() – improve array creation.
from() – create arrays from array-like or iterable objects.

Section 7. Flattening arrays
flat() – flatten an array recursively up to a specified depth.
flatMap() – execute a mapping function on every element and flatten the result.

Section 10. Accessing elements
at() – access array elements using both positive and negative indexes.


Section 11. Reversing elements
reverse() – reverse the order of elements in place and return the same array with the elements in the reversed order.
toReversed() – reverse the order of elements of an array and return the new array with the elements in the reversed order.


 18::String |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<><><><><><><
 String length
let str=" jugal "
console.log(str.includes("j"))
console.log(str.search("j"))
console.log(str.indexOf("j"))
console.log(str.replace("j" , "J"))
console.log(str. replaceAll("j" , "JUGAL"))
console.log(str.slice(0 , -2))
console.log(str.substring(0 , -2)) // -2 not work in substring
console.log(str.trim())


const stra = "   Hello, world!   ";
const trimmedStart = stra.trimStart();
console.log(trimmedStart); // Output: "Hello, world!   "

const trimmedEnd = stra.trimEnd();
console.log(trimmedEnd); // Output: "   Hello, world!"


String toUpperCase()
String toLowerCase()
String concat()
String trim()
let str = "jugalsharma";
  // Using trimEnd to remove trailing whitespace
  if (str.trimEnd) {
      console.log(str.trimEnd());
  } else {
      console.log("trimEnd is not supported in this environment.");
  }
  
String trimStart()
String trimEnd()
String padStart()
let str = "jugal";
  let paddedStr = str.padEnd(12, 6952);
  console.log(paddedStr);
String padEnd()
String charAt()
String charCodeAt()
String split()

let str = "jugal jugal karan jugal";
  const regex = /jugal/g; // Regular expression to match "jugal" globally
  
  const matches = [...str.matchAll(regex)];
  
  for (const match of matches) {
      console.log(match[0]); // match[0] contains the matched string
  }


let str='jugal'
//String.fromCodePoint(42); // "*"
// String.fromCodePoint(65, 90); // "AZ"
// console.log(str.fromCharCode(65 , 66 , 67))
console.log(str.startsWith('jug'))
console.log(str.repeat(2))
console.log(str.at(-2))
const strs = "To be, or not to be, that is the question.";
console.log(strs.endsWith("to be", 19)); // true

const paragraph = "I think Ruth's dog is cuter than your dog!";
const searchTerm = 'dog';
console.log(
  `Index of the last ${searchTerm} is ${paragraph.lastIndexOf(searchTerm)}`,
);

const filePath = String.raw`C:\Development\profile\aboutme.html`;
console.log(`The file was uploaded from: ${filePath}`);

let a= new String("jugal")
console.log(a)
console.log(a.valueOf());




Section 1. Searching
search() – locate a substring in a string using a regular expression.
indexOf() – get the index of the first occurrence of a substring in a string.
lastIndexOf() – find the index of the last occurrence of a substring in a string.
includes() – check if a string contains a substring.
startsWith() – check if a string starts with another string.
endsWith() – determine if a string ends with another string.



Section 2. Trimming
trim() – remove whitespace characters from a string.
trimStart() – remove the leading whitespace characters of a string.
trimEnd() – remove the ending whitespace characters of a string.

Section 3. Padding
padStart() & padEnd() – pad a string with another string until the result string reaches the given length.


Section 4. Extracting
split() – split a string into an array of substrings.
substring() – extract a substring from a string.
slice() – extract a part of a string.

Section 5. Concatenating & interpolating
concat() – concatenate multiple strings into a new string.
Template literals – learn how to substitute variables in a string.

Section 6. Replacing
replace() – replace a substring in a string with a new one.
replaceAll() – replace all occurrences of a substring that matches a pattern with a new one.


Section 7. Changing cases
toUpperCase – return a string with all characters converted to uppercase.
toLowerCase – return a string with all characters converted to lowercase.


19::Maps ||||||||||||||||||||||||||||||||||||||||||||
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);
new Map()	Creates a new Map
set()	Sets the value for a key in a Map
get()	Gets the value for a key in a Map
delete()	Removes a Map element specified by the key
has()	Returns true if a key exists in a Map
forEach()	Calls a function for each key/value pair in a Map
entries()	Returns an iterator with the [key, value] pairs in a Map
Property	Description
size	Returns the number of elements in a Map


20::Set |||||||||||||||||||||||||||||||||||||||||
new Set()	Creates a new Set
add()	Adds a new element to the Set
delete()	Removes an element from a Set
has()	Returns true if a value exists in the Set
forEach()	Invokes a callback for each element in the Set
values()	Returns an iterator with all the values in a Set
Property	Description
size	Returns the number of elements in a Set

21::WeakSet

22:WeakMaps

23::Hoisted

::::::Number Methods |||||||

Number()
let one=Number("jugal")
console.log(one)

parseFloat()

parseInt()
let tow="14"
let three=parseInt(tow)
console.log(typeof(three))

The Number method toString() does the same.

x.toString()
(123).toString()
(100 + 23).toString()

:::In the chapter Number Methods, you will find more
 methods that can be used to convert numbers to strings:

 toExponential()	
 let num = 12345.6789;
  let exponential = num.toExponential(2); // Output: "1.23e+4"
  
toPrecision()
let num = 12345.6789;
  let precision = num.toPrecision(5); // Output: "12345"
  
toFixed()
let num = 12345.6789;
  let fixed = num.toFixed(2); // Output: "12345.68"
  



::::Types of error in javscript ||||||||||||||||||||||||||||||||
The try statement defines a code block to run (to try).\

    try {
        Block of code to try
      }
      catch(err) {
        Block of code to handle errors
      }

    The catch:: statement defines a code block to handle any error.
    
    The finally:: statement defines a code block to run regardless of the result.
        try {
            Block of code to try
          }
          catch(err) {
            Block of code to handle errors
          }
          finally {
            Block of code to be executed regardless of the try / catch result
          }

        |||||||||||||||||||||||||||||||||||||||||||||
    The throw:: statement defines a custom error.
    try {
        if(x.trim() == "") throw "empty";
        if(isNaN(x)) throw "not a number";
        x = Number(x);
        if(x < 5) throw "too low";
        if(x > 10) throw "too high";
      }



|||||||||||||||||||Throtted||||||||||||
  <button onclick="sendEmail()">sendEmail</button>
let count = 1;
let isThrottled = false;
function sendEmail() {

    let i="my name is number"
    if (!isThrottled) {
        console.log('Sending', count++ , i);
        isThrottled = true;
        setTimeout(() => {
            isThrottled = false;
        }, 1000);
    }
}


||||||||||||||||||||Debounce |||||||||||||||||||||||||-
<button onclick="debounce(sendEmail, 1000)">Send Email</button>

<script>
let count = 1;
let timeout;

function sendEmail() {
    let i = "my name is number";
    console.log('Sending', count++, i);
}
function debounce(func, delay) {
    clearTimeout(timeout);
    timeout = setTimeout(func, delay);
}
</script>




:::::::Data Time

Data new()
now data

getDate()	Get the day as a number (1-31)
getDay()	Get the weekday a number (0-6)
getFullYear()	Get the four digit year (yyyy)
getHours()	Get the hour (0-23)
getMilliseconds()	Get the milliseconds (0-999)
getMinutes()	Get the minutes (0-59)
getMonth()	Get the month (0-11)
getSeconds()	Get the seconds (0-59)
getTime()	Get the time (milliseconds since January 1, 1970)


::::JavaScript Scope  ||||||||||||||
Scope determines the accessibility (visibility) of variables.

JavaScript has 3 types of scope:

Block scope
Function scope
Global scope


..Block Scope
Variables declared with the var keyword can NOT have block scope.

{
  let x = 2;
}
// x can NOT be used here


......Local Scope
Variables declared within a JavaScript function, become
     LOCAL to the function.

        // code here can NOT use carName

        function myFunction() {
          let carName = "Volvo";
          // code here CAN use carName
        }
        
        // code here can NOT use carName



...Function Scope
Variables defined inside a function are not accessible
     (visible) from outside the function.
     function myFunction() {
        var carName = "Volvo";   // Function Scope
      }

      function myFunction() {
        let carName = "Volvo";   // Function Scope
      }


 ...     Global JavaScript Variables

 let carName = "Volvo";
    // code here can use carName
    
    function myFunction() {
    // code here can also use carName
    }]

    ||||||||||Js Bropwser BOM

    window.location.href ||| returns the href (URL) of the current page
window.location.hostname |||returns the domain name of the web host
window.location.pathname ||| returns the path and filename of the current page
window.location.protocol |||returns the web protocol used (http: or https:)
window.location.assign() ||loads a new document

Window History|||||||||||
window.history 
history.back() 
history.forward() 


|||||||Window Navigator


if (navigator.cookieEnabled) {
  console.log("Cookies are enabled in the browser.");
} else {
  console.log("Cookies are disabled in the browser. Please enable them for full functionality.");
}

const appCodeName = navigator.appCodeName;
console.log("Browser Code Name: " + appCodeName);
const platform = navigator.platform;
console.log("Platform: " + platform);


const userAgentData = navigator.userAgentData;
console.log("User Agent Data: " + JSON.stringify(userAgentData));


if ("geolocation" in navigator) {
navigator.geolocation.getCurrentPosition(function(position) {
    console.log("Latitude: " + position.coords.latitude);
    console.log("Longitude: " + position.coords.longitude);
});
} else {
console.log("Geolocation is not supported in this browser.");
}


const language = navigator.language;
console.log("Preferred Language: " + language);

const userAgent = navigator.userAgent;
console.log("User-Agent String: " + userAgent);






|||||||||||||JavaScript Popup Boxes
window.alert("sometext");

if (confirm("Press a button!")) {
    txt = "You pressed OK!";
  } else {
    txt = "You pressed Cancel!";
  }

  let person = prompt("Please enter your name", "Harry Potter");
    let text;
    if (person == null || person == "") {
      text = "User cancelled the prompt.";
    } else {
      text = "Hello " + person + "! How are you today?";
    }

    window.setTimeout(function, milliseconds);

let one=prompt()
if(one == 18){
   console.log(one , "true19")
}else{
   console.log(false)
}
 

    ||||||||||JavaScript Events |||||||||||||||

    onchange	An HTML element has been changed

   onclick::The user clicks an HTML element
onmouseover	::The user moves the mouse over an HTML element
onmouseout::	The user moves the mouse away from an HTML element
onkeydown::	The user pushes a keyboard key
onload::	The browser has finished loading the page


|||||||||||Javascript Math |||||||||||||||


Math.log(x) returns the natural logarithm of x.
console.log(Math.log2(3));
Math.log(1);
Math.log(2);
Math.random()
Math.max(0, 150, 30, 20, -8, -200);
Math.min(0, 150, 30, 20, -8, -200);
Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)
Math.abs(-4.7);
Math.sqrt(64);
Math.pow(8, 2);
Math.sign(-4);
Math.sign(0);
Math.sign(4);
Math.floor(4.9);
Math.ceil(4.9);
Math.round(4.6);
Math.floor(Math.random() * 100) + 1;


|||||||Conditional Statements ||||||||||||||


if 

else

else if

  switch


  What is JSON? |||||||||||||||||

Q what is Tostring

{
  "name": "John",
  "age": 30,
  "isStudent": true,
  "courses": ["Math", "Science"],
  "address": {
    "city": "New York",
    "zipcode": "10001"
  }
}




Window Screen |||||||||||||||
console.log("Screen width: " + screen.width);
console.log("Screen height: " + screen.height);
console.log("Available screen width: " + screen.availWidth);
console.log("Available screen height: " + screen.availHeight);
console.log("Color depth: " + screen.colorDepth);
console.log("Pixel depth: " + screen.pixelDepth);




|||||||||||||||||Javascript Objects ||||||||||


let str="jugal"
  let count={}
  count["name"]=str
  console.log(count)
  ///////
  //changes
  a.name="kanran"
  //deletes
  delete a.ineer
  //add values
  a.city="mimam"
  a['pin code']=181123
  console.log(a.name)
  console.log(a)
  console.log("city" in a)
  console.log(a.getData())
  // console.log(a.ineer.names)
  
  for(item in a){
      console.warn(item)
      console.log("key" + a[item])
  }
  
  let data = {
      name: ["jugal", "sharma"],
      class: "10th"
  };
  
  let str = "jua";
  
  console.log(data.name.includes("jugal")); // Check if "jugal" is in the array
  console.log(str.includes("j")); // Check if "j" is in the string "jua"

  
  let objs=Object.freeze(obj) //freeze not update
    obj.name="jugal sharma" // freeze not update
    delete objs.name; //your freeze name delete
    console.log(obj)

    console.log("object1" , Object.entries(obj)) //convert to array 

    console.log("object1" , Object.values(obj)) //convert to array show  values 

    console.log("object1" , Object.keys(obj)) //convert to keys
